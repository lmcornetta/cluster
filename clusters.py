import sys, os, shutil
from read_frame import molecules

if __name__=="__main__":
    # Lets assume we have the list of molecules generated by the read_frame.py
    filename = sys.argv[1]
    list_molecules, number_of_ethanol, number_of_water = molecules(filename)
    total_molecules = number_of_ethanol + number_of_water

    # Choose number of clusters to generate (bulk and surface)
    number_of_clusters_surf = 10
    number_of_clusters_bulk = 10

    # Choose radius cutoff, in angstroms
    radius_cutoff = 8.40

    # Choose central molecule {options: "ethanol" or "water"}
    central_molecule_type = "ethanol"

    # Choose name of the basis 
    basis_core = "AUG-CC-PCVDZ-DK"
    basis_sol = "6-31Gs"
    ###basis_core = "ANO-RCC-VDZP"
    ###basis_sol = "ANO-S" 

    # Condition for distinguishing surface clusters from bulk clusters by 
    # the coordinate of the CM of the central molecule along the direction
    # normal to the surface
    surf_ymin, surf_ymax = 25.0, 45.0
    
    index, surf, bulk = 0, 0, 0
    while surf + bulk < number_of_clusters_surf + number_of_clusters_bulk:

        # Central molecule
        central_molecule = list_molecules[index]
        if central_molecule.name != central_molecule_type or central_molecule.is_broken():
            index += 1
            continue

        # Output file
        if central_molecule.ycm > surf_ymin and central_molecule.ycm < surf_ymax:
            # Execute here depending on the condition of line 29
            if surf >= number_of_clusters_surf:
                index += 1
                continue
            cluster_type = "surface"
            surf += 1
            fcluster = open("surf%d.xyz"%surf,"w")
            fmolcas = open("surf%d.input"%surf,"w")
            fmolcas_zeta1 = open("surf%d_zeta1.input"%surf,"w")
            fmolcas_zeta2 = open("surf%d_zeta2.input"%surf,"w")
            fmolcas_zeta1_expbas = open("surf%d_zeta1_expbas.input"%surf,"w")
            fmolcas_zeta2_expbas = open("surf%d_zeta2_expbas.input"%surf,"w")
            fmolcas_mcpdft = open("surf%d_mcpdft.input"%surf,"w")
            
            # Create individual directory for the cluster files
            os.mkdir("./surf%d"%surf)

        else:
            if bulk >= number_of_clusters_bulk:
                index += 1
                continue
            cluster_type = "bulk"
            bulk += 1
            fcluster = open("bulk%d.xyz"%bulk,"w")
            fmolcas = open("bulk%d.input"%bulk,"w")
            fmolcas_zeta1 = open("bulk%d_zeta1.input"%bulk,"w")
            fmolcas_zeta2 = open("bulk%d_zeta2.input"%bulk,"w")
            fmolcas_zeta1_expbas = open("bulk%d_zeta1_expbas.input"%bulk,"w")
            fmolcas_zeta2_expbas = open("bulk%d_zeta2_expbas.input"%bulk,"w")
            fmolcas_mcpdft = open("bulk%d_mcpdft.input"%bulk,"w")
            
            # Create individual directory for the cluster files
            os.mkdir("./bulk%d"%bulk)

        fmolcas.write("&SEWARD\n Cholesky\n")
        fmolcas_zeta1_expbas.write("&SEWARD\n Cholesky\n")
        fmolcas_zeta2_expbas.write("&SEWARD\n Cholesky\n")
        fmolcas_zeta1.write("&SEWARD\n Cholesky\n")
        fmolcas_zeta2.write("&SEWARD\n Cholesky\n")
        fmolcas_mcpdft.write("&SEWARD\n Cholesky\n")
        h_index, c_index, o_index = 1, 1, 1
        for i in range(central_molecule.number_of_atoms):
            if central_molecule.list_of_types[i] == 'H':
                atom_string = " H" + str(h_index) + "\t" + str(central_molecule.list_of_coord[i][0]) + "\t" + str(central_molecule.list_of_coord[i][1]) + "\t" + str(central_molecule.list_of_coord[i][2]) + " Angstrom" + "\n"
                fmolcas.write(" Basis set\n  H.%s\n"%basis_core)
                fmolcas.write(atom_string)
                fmolcas.write(" End of basis\n")
                fmolcas_mcpdft.write(" Basis set\n  H.%s\n"%basis_core)
                fmolcas_mcpdft.write(atom_string)
                fmolcas_mcpdft.write(" End of basis\n")
                fmolcas_zeta1_expbas.write(" Basis set\n  H.%s\n"%basis_core)
                fmolcas_zeta1_expbas.write(atom_string)
                fmolcas_zeta1_expbas.write(" End of basis\n")
                fmolcas_zeta2_expbas.write(" Basis set\n  H.%s\n"%basis_core)
                fmolcas_zeta2_expbas.write(atom_string)
                fmolcas_zeta2_expbas.write(" End of basis\n")
                fmolcas_zeta1.write(" Basis set\n  H.%s\n"%basis_core)
                fmolcas_zeta1.write(atom_string)
                fmolcas_zeta1.write(" End of basis\n")
                fmolcas_zeta2.write(" Basis set\n  H.%s\n"%basis_core)
                fmolcas_zeta2.write(atom_string)
                fmolcas_zeta2.write(" End of basis\n")
                h_index += 1

            if central_molecule.list_of_types[i] == 'C':
                atom_string = " C" + str(c_index) + "\t" + str(central_molecule.list_of_coord[i][0]) + "\t" + str(central_molecule.list_of_coord[i][1]) + "\t" + str(central_molecule.list_of_coord[i][2]) + " Angstrom" + "\n"
                fmolcas.write(" Basis set\n  C.%s\n"%basis_core)
                fmolcas.write(atom_string)
                fmolcas.write(" End of basis\n")
                fmolcas_mcpdft.write(" Basis set\n  C.%s\n"%basis_core)
                fmolcas_mcpdft.write(atom_string)
                fmolcas_mcpdft.write(" End of basis\n")
                fmolcas_zeta1_expbas.write(" Basis set\n  C.%s\n"%basis_core)
                fmolcas_zeta1_expbas.write(atom_string)
                fmolcas_zeta1_expbas.write(" End of basis\n")
                fmolcas_zeta2_expbas.write(" Basis set\n  C.%s\n"%basis_core)
                fmolcas_zeta2_expbas.write(atom_string)
                fmolcas_zeta2_expbas.write(" End of basis\n")
                if c_index == 1:
                    fmolcas_zeta1.write(" Basis set\n  N.%s\n"%basis_core)
                    fmolcas_zeta1.write(atom_string)
                    fmolcas_zeta1.write(" End of basis\n")
                    fmolcas_zeta2.write(" Basis set\n  C.%s\n"%basis_core)
                    fmolcas_zeta2.write(atom_string)
                    fmolcas_zeta2.write(" End of basis\n")
                elif c_index == 2:
                    fmolcas_zeta1.write(" Basis set\n  C.%s\n"%basis_core)
                    fmolcas_zeta1.write(atom_string)
                    fmolcas_zeta1.write(" End of basis\n")
                    fmolcas_zeta2.write(" Basis set\n  N.%s\n"%basis_core)
                    fmolcas_zeta2.write(atom_string)
                    fmolcas_zeta2.write(" End of basis\n")
                else:
                    raise Exception("Error! More than 2 carbon atoms in ethanol. Check code.")
                c_index += 1

            if central_molecule.list_of_types[i] == 'O':
                atom_string = " O" + str(o_index) + "\t" + str(central_molecule.list_of_coord[i][0]) + "\t" + str(central_molecule.list_of_coord[i][1]) + "\t" + str(central_molecule.list_of_coord[i][2]) + " Angstrom" + "\n"
                fmolcas.write(" Basis set\n  O.%s\n"%basis_core)
                fmolcas.write(atom_string)
                fmolcas.write(" End of basis\n")
                fmolcas_mcpdft.write(" Basis set\n  O.%s\n"%basis_core)
                fmolcas_mcpdft.write(atom_string)
                fmolcas_mcpdft.write(" End of basis\n")
                fmolcas_zeta1_expbas.write(" Basis set\n  O.%s\n"%basis_core)
                fmolcas_zeta1_expbas.write(atom_string)
                fmolcas_zeta1_expbas.write(" End of basis\n")
                fmolcas_zeta2_expbas.write(" Basis set\n  O.%s\n"%basis_core)
                fmolcas_zeta2_expbas.write(atom_string)
                fmolcas_zeta2_expbas.write(" End of basis\n")
                fmolcas_zeta1.write(" Basis set\n  O.%s\n"%basis_core)
                fmolcas_zeta1.write(atom_string)
                fmolcas_zeta1.write(" End of basis\n")
                fmolcas_zeta2.write(" Basis set\n  O.%s\n"%basis_core)
                fmolcas_zeta2.write(atom_string)
                fmolcas_zeta2.write(" End of basis\n")
                o_index += 1

        # All good! Let's go
        molecules_in_cluster = [central_molecule]
        cluster_size = 1
        cluster_atoms_quantity = central_molecule.number_of_atoms
        for molecule in list_molecules:
            if molecule.is_broken():
                continue
            d = central_molecule.distance_to_other(molecule)
            if d < radius_cutoff and d > 0.0:
                molecules_in_cluster.append(molecule)
                # Writting to molcas input
                for i in range(molecule.number_of_atoms):
                    if molecule.list_of_types[i] == 'H':
                        atom_string = " H" + str(h_index) + "\t" + str(molecule.list_of_coord[i][0]) + "\t" + str(molecule.list_of_coord[i][1]) + "\t" + str(molecule.list_of_coord[i][2]) + " Angstrom" + "\n"
                        fmolcas.write(" Basis set\n  H.%s\n"%basis_sol)
                        fmolcas.write(atom_string)
                        fmolcas.write(" End of basis\n")
                        fmolcas_mcpdft.write(" Basis set\n  H.%s\n"%basis_sol)
                        fmolcas_mcpdft.write(atom_string)
                        fmolcas_mcpdft.write(" End of basis\n")
                        fmolcas_zeta1_expbas.write(" Basis set\n  H.%s\n"%basis_sol)
                        fmolcas_zeta1_expbas.write(atom_string)
                        fmolcas_zeta1_expbas.write(" End of basis\n")
                        fmolcas_zeta2_expbas.write(" Basis set\n  H.%s\n"%basis_sol)
                        fmolcas_zeta2_expbas.write(atom_string)
                        fmolcas_zeta2_expbas.write(" End of basis\n")
                        fmolcas_zeta1.write(" Basis set\n  H.%s\n"%basis_sol)
                        fmolcas_zeta1.write(atom_string)
                        fmolcas_zeta1.write(" End of basis\n")
                        fmolcas_zeta2.write(" Basis set\n  H.%s\n"%basis_sol)
                        fmolcas_zeta2.write(atom_string)
                        fmolcas_zeta2.write(" End of basis\n")
                        h_index += 1

                    if molecule.list_of_types[i] == 'C':
                        atom_string = " C" + str(c_index) + "\t" + str(molecule.list_of_coord[i][0]) + "\t" + str(molecule.list_of_coord[i][1]) + "\t" + str(molecule.list_of_coord[i][2]) + " Angstrom" + "\n"
                        fmolcas.write(" Basis set\n  C.%s\n"%basis_sol)
                        fmolcas.write(atom_string)
                        fmolcas.write(" End of basis\n")
                        fmolcas_mcpdft.write(" Basis set\n  C.%s\n"%basis_sol)
                        fmolcas_mcpdft.write(atom_string)
                        fmolcas_mcpdft.write(" End of basis\n")
                        fmolcas_zeta1_expbas.write(" Basis set\n  C.%s\n"%basis_sol)
                        fmolcas_zeta1_expbas.write(atom_string)
                        fmolcas_zeta1_expbas.write(" End of basis\n")
                        fmolcas_zeta2_expbas.write(" Basis set\n  C.%s\n"%basis_sol)
                        fmolcas_zeta2_expbas.write(atom_string)
                        fmolcas_zeta2_expbas.write(" End of basis\n")
                        fmolcas_zeta1.write(" Basis set\n  C.%s\n"%basis_sol)
                        fmolcas_zeta1.write(atom_string)
                        fmolcas_zeta1.write(" End of basis\n")
                        fmolcas_zeta2.write(" Basis set\n  C.%s\n"%basis_sol)
                        fmolcas_zeta2.write(atom_string)
                        fmolcas_zeta2.write(" End of basis\n")
                        c_index += 1

                    if molecule.list_of_types[i] == 'O':
                        atom_string = " O" + str(o_index) + "\t" + str(molecule.list_of_coord[i][0]) + "\t" + str(molecule.list_of_coord[i][1]) + "\t" + str(molecule.list_of_coord[i][2]) + " Angstrom" + "\n"
                        fmolcas.write(" Basis set\n  O.%s\n"%basis_sol)
                        fmolcas.write(atom_string)
                        fmolcas.write(" End of basis\n")
                        fmolcas_mcpdft.write(" Basis set\n  O.%s\n"%basis_sol)
                        fmolcas_mcpdft.write(atom_string)
                        fmolcas_mcpdft.write(" End of basis\n")
                        fmolcas_zeta1_expbas.write(" Basis set\n  O.%s\n"%basis_sol)
                        fmolcas_zeta1_expbas.write(atom_string)
                        fmolcas_zeta1_expbas.write(" End of basis\n")
                        fmolcas_zeta2_expbas.write(" Basis set\n  O.%s\n"%basis_sol)
                        fmolcas_zeta2_expbas.write(atom_string)
                        fmolcas_zeta2_expbas.write(" End of basis\n")
                        fmolcas_zeta1.write(" Basis set\n  O.%s\n"%basis_sol)
                        fmolcas_zeta1.write(atom_string)
                        fmolcas_zeta1.write(" End of basis\n")
                        fmolcas_zeta2.write(" Basis set\n  O.%s\n"%basis_sol)
                        fmolcas_zeta2.write(atom_string)
                        fmolcas_zeta2.write(" End of basis\n")
                        o_index += 1
            
                cluster_size += 1
                cluster_atoms_quantity += molecule.number_of_atoms
        
        # Number of doubly occupied orbitals of the neutral closed shell ground state
        nrof_orbitals = int(((h_index - 1) + 6*(c_index - 1) + 8*(o_index - 1))/2)

        # Write the rest of each MOLCAS input
        fmolcas.write(" Douglas-Kroll\n&SCF\n KSDFT \n  B3LYP\n>>> COPY $Project.ScfOrb $CurrDir/$Project.ScfOrb")
        
        # Writting section for surface clusters
        if cluster_type == "surface":
            fmolcas_mcpdft.write(" Douglas-Kroll\n>>> COPY $CurrDir/surf%d.ScfOrb INPORB\n&RASSCF\n LumOrb\n Symmetry\n  1\n Spin\n  1\n NactEl\n  2 1 0\n Inactive\n  %d\n Ras1\n  1\n Ras2\n  0\n Ras3\n  0\n CIOnly\n KSDFT\n ROKS; T:B3LYP\n CIRoot\n  1 1 1\n>>> COPY $Project.JobIph $CurrDir/$Project.gs.JobIph\n"%(surf,(nrof_orbitals - 1)))
            fmolcas_mcpdft.write("&CASPT2\n  Multistate\n  All\n MaxIter\n  200\n Imag\n  0.15\n>>> COPY $Project.JobMix $CurrDir/$Project.gs.JobMix\n\n")
            fmolcas_mcpdft.write(">>> COPY $CurrDir/surf%d_zeta1_expbas.ExpOrb INPORB\n"%surf)
            fmolcas_mcpdft.write("&RASSCF\n LumOrb\n Symmetry\n  1\n Spin\n  2\n NactEl\n  1 1 0\n Inactive\n  %d\n Ras1\n  1\n Ras2\n  0\n Ras3\n  0\n Alter\n  1\n  1 %d %d\n CIOnly\n KSDFT\n ROKS; T:B3LYP\n CIRoot\n  1 1 1\n>>> COPY $Project.JobIph $CurrDir/$Project.zeta1.JobIph\n"%((nrof_orbitals - 1), o_index, nrof_orbitals))
            fmolcas_mcpdft.write("&CASPT2\n  Multistate\n  All\n MaxIter\n  200\n Imag\n  0.15\n>>> COPY $Project.JobMix $CurrDir/$Project.zeta1.JobMix\n\n")
            fmolcas_mcpdft.write(">>> COPY $CurrDir/surf%d_zeta2_expbas.ExpOrb INPORB\n"%surf)
            fmolcas_mcpdft.write("&RASSCF\n LumOrb\n Symmetry\n  1\n Spin\n  2\n NactEl\n  1 1 0\n Inactive\n  %d\n Ras1\n  1\n Ras2\n  0\n Ras3\n  0\n Alter\n  1\n  1 %d %d\n CIOnly\n KSDFT\n ROKS; T:B3LYP\n CIRoot\n  1 1 1\n>>> COPY $Project.JobIph $CurrDir/$Project.zeta1.JobIph\n"%((nrof_orbitals - 1), o_index, nrof_orbitals))
            fmolcas_mcpdft.write("&CASPT2\n  Multistate\n  All\n MaxIter\n  200\n Imag\n  0.15\n>>> COPY $Project.JobMix $CurrDir/$Project.zeta2.JobMix\n\n")

            fmolcas_zeta1_expbas.write(" Douglas-Kroll\n>>> COPY $CurrDir/surf%d_zeta1.ScfOrb INPORB\n>>> COPY $Project.RunFile RUNFIL1\n>>> COPY $CurrDir/surf%d_zeta1.RunFile RUNFIL2\n&EXPBAS\n>>> COPY $Project.ExpOrb $CurrDir/$Project.ExpOrb"%(surf - 1,surf - 1))
            fmolcas_zeta2_expbas.write(" Douglas-Kroll\n>>> COPY $CurrDir/surf%d_zeta2.ScfOrb INPORB\n>>> COPY $Project.RunFile RUNFIL1\n>>> COPY $CurrDir/surf%d_zeta2.RunFile RUNFIL2\n&EXPBAS\n>>> COPY $Project.ExpOrb $CurrDir/$Project.ExpOrb"%(surf - 1,surf - 1))

        # Writting section for bulk clusters
        if cluster_type == "bulk":
            fmolcas_mcpdft.write(" Douglas-Kroll\n>>> COPY $CurrDir/bulk%d.ScfOrb INPORB\n&RASSCF\n LumOrb\n Symmetry\n  1\n Spin\n  1\n NactEl\n  2 1 0\n Inactive\n  %d\n Ras1\n  1\n Ras2\n  0\n Ras3\n  0\n CIOnly\n KSDFT\n ROKS; T:B3LYP\n CIRoot\n  1 1 1\n>>> COPY $Project.JobIph $CurrDir/$Project.gs.JobIph\n"%(bulk,(nrof_orbitals - 1)))
            fmolcas_mcpdft.write("&CASPT2\n  Multistate\n  All\n MaxIter\n  200\n Imag\n  0.15\n>>> COPY $Project.JobMix $CurrDir/$Project.gs.JobMix\n\n")
            fmolcas_mcpdft.write(">>> COPY $CurrDir/bulk%d_zeta1_expbas.ExpOrb INPORB\n"%bulk)
            fmolcas_mcpdft.write("&RASSCF\n LumOrb\n Symmetry\n  1\n Spin\n  2\n NactEl\n  1 1 0\n Inactive\n  %d\n Ras1\n  1\n Ras2\n  0\n Ras3\n  0\n Alter\n  1\n  1 %d %d\n CIOnly\n KSDFT\n ROKS; T:B3LYP\n CIRoot\n  1 1 1\n>>> COPY $Project.JobIph $CurrDir/$Project.zeta1.JobIph\n"%((nrof_orbitals - 1), o_index, nrof_orbitals))
            fmolcas_mcpdft.write("&CASPT2\n  Multistate\n  All\n MaxIter\n  200\n Imag\n  0.15\n>>> COPY $Project.JobMix $CurrDir/$Project.zeta1.JobMix\n\n")
            fmolcas_mcpdft.write(">>> COPY $CurrDir/bulk%d_zeta2_expbas.ExpOrb INPORB\n"%bulk)
            fmolcas_mcpdft.write("&RASSCF\n LumOrb\n Symmetry\n  1\n Spin\n  2\n NactEl\n  1 1 0\n Inactive\n  %d\n Ras1\n  1\n Ras2\n  0\n Ras3\n  0\n Alter\n  1\n  1 %d %d\n CIOnly\n KSDFT\n ROKS; T:B3LYP\n CIRoot\n  1 1 1\n>>> COPY $Project.JobIph $CurrDir/$Project.zeta1.JobIph\n"%((nrof_orbitals - 1), o_index, nrof_orbitals))
            fmolcas_mcpdft.write("&CASPT2\n  Multistate\n  All\n MaxIter\n  200\n Imag\n  0.15\n>>> COPY $Project.JobMix $CurrDir/$Project.zeta2.JobMix\n\n")

            fmolcas_zeta1_expbas.write(" Douglas-Kroll\n>>> COPY $CurrDir/bulk%d_zeta1.ScfOrb INPORB\n>>> COPY $Project.RunFile RUNFIL1\n>>> COPY $CurrDir/bulk%d_zeta1.RunFile RUNFIL2\n&EXPBAS\n>>> COPY $Project.ExpOrb $CurrDir/$Project.ExpOrb"%(bulk - 1,bulk - 1))
            fmolcas_zeta2_expbas.write(" Douglas-Kroll\n>>> COPY $CurrDir/bulk%d_zeta2.ScfOrb INPORB\n>>> COPY $Project.RunFile RUNFIL1\n>>> COPY $CurrDir/bulk%d_zeta2.RunFile RUNFIL2\n&EXPBAS\n>>> COPY $Project.ExpOrb $CurrDir/$Project.ExpOrb"%(bulk - 1,bulk - 1))
    
        fmolcas_zeta1.write(" Douglas-Kroll\n&SCF\n KSDFT \n  B3LYP\n Charge\n  1\n>>> COPY $Project.ScfOrb $CurrDir/$Project.ScfOrb\n>>> COPY $Project.RunFile $CurrDir/$Project.RunFile")
        fmolcas_zeta2.write(" Douglas-Kroll\n&SCF\n KSDFT \n  B3LYP\n Charge\n  1\n>>> COPY $Project.ScfOrb $CurrDir/$Project.ScfOrb\n>>> COPY $Project.RunFile $CurrDir/$Project.RunFile")

        # Close output files
        fmolcas.close()
        fmolcas_mcpdft.close()
        fmolcas_zeta1.close()
        fmolcas_zeta2.close()
        fmolcas_zeta1_expbas.close()
        fmolcas_zeta2_expbas.close()
        fcluster.write("%d\n\n"%cluster_atoms_quantity)
        for i in range(cluster_size):
            molecules_in_cluster[i].write_molecule(fcluster)
        fcluster.close()
        #cluster += 1
        index += 1

        # Move files to directories
        if cluster_type == "surface":
            shutil.move("surf%d.xyz"%surf, "./surf%d/surf%d.xyz"%(surf,surf))
            shutil.move("surf%d.input"%surf, "./surf%d/surf%d.input"%(surf,surf))
            shutil.move("surf%d_zeta1.input"%surf, "./surf%d/surf%d_zeta1.input"%(surf,surf))
            shutil.move("surf%d_zeta2.input"%surf, "./surf%d/surf%d_zeta2.input"%(surf,surf))
            shutil.move("surf%d_zeta1_expbas.input"%surf, "./surf%d/surf%d_zeta1_expbas.input"%(surf,surf))
            shutil.move("surf%d_zeta2_expbas.input"%surf, "./surf%d/surf%d_zeta2_expbas.input"%(surf,surf))
            shutil.move("surf%d_mcpdft.input"%surf, "./surf%d/surf%d_mcpdft.input"%(surf,surf))

        elif cluster_type == "bulk":
            shutil.move("bulk%d.xyz"%bulk, "./bulk%d/bulk%d.xyz"%(bulk,bulk))
            shutil.move("bulk%d.input"%bulk, "./bulk%d/bulk%d.input"%(bulk,bulk))
            shutil.move("bulk%d_zeta1.input"%bulk, "./bulk%d/bulk%d_zeta1.input"%(bulk,bulk))
            shutil.move("bulk%d_zeta2.input"%bulk, "./bulk%d/bulk%d_zeta2.input"%(bulk,bulk))
            shutil.move("bulk%d_zeta1_expbas.input"%bulk, "./bulk%d/bulk%d_zeta1_expbas.input"%(bulk,bulk))
            shutil.move("bulk%d_zeta2_expbas.input"%bulk, "./bulk%d/bulk%d_zeta2_expbas.input"%(bulk,bulk))
            shutil.move("bulk%d_mcpdft.input"%bulk, "./bulk%d/bulk%d_mcpdft.input"%(bulk,bulk))
    
    # Print totals
    print("\n Total number of generated clusters with radius cutoff of %f angstroms: %d"%(radius_cutoff, bulk + surf))
    print(" ---> Bulk clusters: %d"%bulk)
    print(" ---> Surface clusters: %d\n"%surf)
